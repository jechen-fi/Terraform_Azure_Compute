
## https://registry.terraform.io/providers/hashicorp/tls/latest/docs/resources/private_key
## The private key generated by this resource will be stored unencrypted in your Terraform state file. Use of this resource for production deployments is not recommended. Instead, generate a private key file outside of Terraform and distribute it securely to the system where Terraform will be run.

## Generating a New Key
## Since a private key is a logical resource that lives only in the Terraform state, it will persist until it is explicitly destroyed by the user.

## In order to force the generation of a new key within an existing state, the private key instance can be "tainted":

## terraform taint tls_private_key.example

locals {
  tags      = merge(var.global_settings.tags, var.tags)
  name_mask = "{cloudprefix}{delimiter}{locationcode}{delimiter}{envlabel}{delimiter}{name}"
}

module "resource_naming" {
  source = "../../resource_naming"

  global_settings = var.global_settings
  settings        = var.ssh_key
  resource_type   = "azurerm_ssh_public_key"
  name_mask       = try(var.ssh_key.naming_convention.name_mask, local.name_mask)
}

resource "tls_private_key" "ssh_key" {
  count = try(var.ssh_key.private_key, null) != null ? 1 : 0

  algorithm   = try(var.ssh_key.private_key.algorithm, "RSA")                                                                     # RSA, ECDSA, ED25519
  ecdsa_curve = try(var.ssh_key.private_key.algorithm, null) == "ECDSA" ? try(var.ssh_key.private_key.ecdsa_curve, "P224") : null # P224, P256, P384, P521
  rsa_bits    = try(var.ssh_key.private_key.algorithm, null) == "RSA" ? try(var.ssh_key.private_key.rsa_bits, 2048) : null
}

resource "azurerm_ssh_public_key" "ssh_key" {
  name                = module.resource_naming.name_result
  location            = var.location != null ? var.location : var.global_settings.location
  resource_group_name = var.resource_group_name
  public_key          = try(var.ssh_key.public_key, null) != null ? abspath(var.ssh_key.public_key) : tls_private_key.ssh_key[0].public_key_openssh

  depends_on = [
    tls_private_key.ssh_key
  ]
}
